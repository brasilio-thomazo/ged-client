// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentServiceClient interface {
	Store(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentReply, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) Store(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentReply, error) {
	out := new(DocumentReply)
	err := c.cc.Invoke(ctx, "/duat.DocumentService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility
type DocumentServiceServer interface {
	Store(context.Context, *DocumentRequest) (*DocumentReply, error)
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServiceServer struct {
}

func (UnimplementedDocumentServiceServer) Store(context.Context, *DocumentRequest) (*DocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s *grpc.Server, srv DocumentServiceServer) {
	s.RegisterService(&_DocumentService_serviceDesc, srv)
}

func _DocumentService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duat.DocumentService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).Store(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DocumentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "duat.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _DocumentService_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "duat.proto",
}

// DocumentImageServiceClient is the client API for DocumentImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentImageServiceClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (DocumentImageService_StoreClient, error)
}

type documentImageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentImageServiceClient(cc grpc.ClientConnInterface) DocumentImageServiceClient {
	return &documentImageServiceClient{cc}
}

func (c *documentImageServiceClient) Store(ctx context.Context, opts ...grpc.CallOption) (DocumentImageService_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DocumentImageService_serviceDesc.Streams[0], "/duat.DocumentImageService/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentImageServiceStoreClient{stream}
	return x, nil
}

type DocumentImageService_StoreClient interface {
	Send(*DocumentImageRequest) error
	CloseAndRecv() (*DocumentImageReply, error)
	grpc.ClientStream
}

type documentImageServiceStoreClient struct {
	grpc.ClientStream
}

func (x *documentImageServiceStoreClient) Send(m *DocumentImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *documentImageServiceStoreClient) CloseAndRecv() (*DocumentImageReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DocumentImageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocumentImageServiceServer is the server API for DocumentImageService service.
// All implementations must embed UnimplementedDocumentImageServiceServer
// for forward compatibility
type DocumentImageServiceServer interface {
	Store(DocumentImageService_StoreServer) error
	mustEmbedUnimplementedDocumentImageServiceServer()
}

// UnimplementedDocumentImageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentImageServiceServer struct {
}

func (UnimplementedDocumentImageServiceServer) Store(DocumentImageService_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedDocumentImageServiceServer) mustEmbedUnimplementedDocumentImageServiceServer() {}

// UnsafeDocumentImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentImageServiceServer will
// result in compilation errors.
type UnsafeDocumentImageServiceServer interface {
	mustEmbedUnimplementedDocumentImageServiceServer()
}

func RegisterDocumentImageServiceServer(s *grpc.Server, srv DocumentImageServiceServer) {
	s.RegisterService(&_DocumentImageService_serviceDesc, srv)
}

func _DocumentImageService_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentImageServiceServer).Store(&documentImageServiceStoreServer{stream})
}

type DocumentImageService_StoreServer interface {
	SendAndClose(*DocumentImageReply) error
	Recv() (*DocumentImageRequest, error)
	grpc.ServerStream
}

type documentImageServiceStoreServer struct {
	grpc.ServerStream
}

func (x *documentImageServiceStoreServer) SendAndClose(m *DocumentImageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *documentImageServiceStoreServer) Recv() (*DocumentImageRequest, error) {
	m := new(DocumentImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DocumentImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "duat.DocumentImageService",
	HandlerType: (*DocumentImageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _DocumentImageService_Store_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "duat.proto",
}
